// Fetch name of branch name From branchNameRef
def branchName = branch_name_ref.drop(11)
def isCommittedBranchDeployable = false
def deployService = "default"
def deployEnvironment = "default"
println "\n" + branchName + " branch has casued the Webhook Trigger \n"

def definedMicroServices = ["profile", "security", "product", "billing", "payment"] as String[]

// Iterate through defined microservices & validate wheter branch can be deployed?
def definedEnvs = ["develop", "qa"] as String[]
for (i = 0; i <definedMicroServices.length; i++) {
   for (j=0; j<definedEnvs.length; j++) {
       def msName = definedMicroServices[i];
       def envName = definedEnvs[j];
       def mixer = "_"
       def serviceBranchName = envName + mixer + msName
       if ( serviceBranchName == branchName) {
           isCommittedBranchDeployable = true
           deployService = msName
           deployEnvironment = envName
           break
       }
   } 

   if (isCommittedBranchDeployable) {
       break
   }
}


if (isCommittedBranchDeployable) {
    println "\n" + branchName + " branch will be deployed in " + deployEnvironment + " Environment"
    def stageName = deployService + " " + deployEnvironment
    stage (stageName) {
        build job: 'MainPipeline', parameters: [
            string(name: 'microServiceName', value: deployService),
            string(name: 'environment', value: deployEnvironment)
            ]
    }
} else {
    println "Feature Branch will not be deployed"
}
